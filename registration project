python3 -m venv env
. env/bin/activate
nano requirements.txt
Django     
django-rest-framework
psycopg2-binary
python-decouple
---------------------------------------------------------
django-admin startproject registration_project .
mkdir applications --- cd applications
django-admin startapp account
---------------------------------------------------------
Django has a built-in user model (e.g. createsuperuser)
заходим в models.py чтобы переопределить модель пользователя
ЭТО  НУЖНО ДЕЛАТЬ ПЕРЕД(!!!!!) МИГРАЦИЯМИ
blank = True -поле необязательно для заполнения
null = True -хранит в себе Null

models.py
..
from django.contrib.auth.base_user import BaseUserManager
from django.contrib.auth.models import AbstractUser
from django.db import models


class UserManager(BaseUserManager):
    use_in_migrations = True

    def create_user(self, email, password, *args, **kwargs):
        email = self.normalize_email(email)  # нужен для валидации почты (проверка на наличие @ etc.)
        user = self.model(email=email)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password, *args, **kwargs):
        email = self.normalize_email(email)  # нужен для валидации почты (проверка на наличие @ etc.)
        user = self.model(email=email)
        user.set_password(password)
        user.is_staff = True  # персонал сайта
        user.is_superuser = True
        user.save(using=self._db)
        return user


class User(AbstractUser):
    email = models.EmailField(unique=True)
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []
    
    objects = UserManager()  # в будущем будет использоваться наш манагер, а не встроенный
    
    def __str__(self):
        return self.email
    
пока миграций НЕ делаем
---------------------------------------------------------
python decouple - библиотека, чтобы спрятать настройки в .env (SECRET_KEY in settings for instance)

создаем файл .env на главном уровне файла (где manage.py)

SECRET_KEY=django-insecure-2)2alxj97w_qzsptubp&5gj6xwa-0n251-(gsfsvr1zqziddjt
DEBUG=TRUE
DB_NAME=registration_db
DB_USER=postgres
DB_PASSWORD=1
# пробелов быть нигде не должно!
...
settings.py
..
from decouple import config

SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=False)
.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'registration_db',
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': 'localhost',
        'PORT': 5432
    }
}
.
STATIC_URL = 'static/'

AUTH_USER_MODEL = 'account.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ]
}           # будем использовать тот токен который есть у самого rest framework

.
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # modules
    'rest_framework',
    'rest_framework.authtoken',

    # custom apps
    'applications.account',
]

---------------------------------------------------------
меняем в apps.py 
name = 'applications.account'
---------------------------------------------------------
делаем первые миграции
python3 manage.py makemigrations
python3 manage.py migrate
---------------------------------------------------------
создаем в account.py файл serializers.py
serializer translate JSON to Python and back

serializers.py......

from django.contrib.auth import get_user_model
from rest_framework import serializers

User = get_user_model()


class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(min_length=6, write_only=True)
    password_confirmation = serializers.CharField(min_length=6, write_only=True)

    class Meta:
        model = User
        fields = ('email', 'password', 'password_confirmation')     # пока эти поля не прописаны,
                                                                    # поэтому определяем прямо перед ними

    # валидируем данные (проверка на истинность)
    def validate_email(self, email):
        if User.objects.filter(email=email).exists():
            raise serializers.ValidationError('User with the given email already exists')
        return email

    def validate(self, validated_data):  # validate_data - dictionary
        # проверка password, password_confirmation
        password = validated_data.get('password')
        password_confirmation = validated_data.get('password_confirmation')
        if password != password_confirmation:
            raise serializers.ValidationError('Passwords don\'t match')
        return validated_data


    def create(self, validated_data):
        email = validated_data.get('email')
        password = validated_data.get('password')
        user = User.objects.create_user(email, password)     # create_user создан в models
        return user
---------------------------------------------------------
views.py
3 способа создания: функции, наследование от APIView (каждый метод по отдельности одноименными функциями) и ListAPIView

from rest_framework.views import APIView
from applications.account.serializers import RegisterSerializer
from rest_framework.response import Response
from rest_framework import status

class RegistrationView(APIView):
    def post(self, request):
        data = request.data
        serializer = RegisterSerializer(data=data)
        if serializer.is_valid(raise_exception=True):
            serializer.save()
            return Response('Successfully signed up', status=status.HTTP_201_CREATED)
---------------------------------------------------------
внутри account создаем 
urls.py
.
from django.urls import path
from applications.account.views import RegistrationView


urlpatterns = [
    path('register/', RegistrationView.as_view())
]
---------------------------------------------------------
переходим в глобальный url
registration_project/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('account/', include('applications.account.urls'))
]
---------------------------------------------------------
запускаем сервер и postman
chrome://apps/ ---> postman

send POST query to http://localhost:8000/account/register/
.
вкладка body (раздел form-data)
.
key-email, key-password, key-password_confirmation
---------------------------------------------------------
файл account/admin.py

from django.contrib import admin
from django.contrib.auth import get_user_model

User = get_user_model()

admin.site.register(User)
---------------------------------------------------------
python3 manage.py createsuperuser
---------------------------------------------------------
закидываем на github
git init
git remote add origin SSH_link
git remote -v (just for lulz)
git pull origin main
git branch django_dev
git checkout django_dev
git add .
git commit -m 'Random comment'
git push origin django_dev
---------------------------------------------------------
стащить проект

git stash
git pull origin main

git clone HTTPS_LINK .
rm -rf .git
djecrety.ir - генерация джанго-ключей (лол, кек, чебурек)


_______________________________________________________
_______________________________________________________
_______________________________________________________
_______________________________________________________
serializers.py

from django.contrib.auth import get_user_model, authenticate
.
class LoginSerializer(serializers.Serializer):
    email = serializers.EmailField()
    password = serializers.CharField(style={'input_type': 'password'}, 
                                     trim_whitespace=False)
                                     
    def validate(self, attrs):
        email = attrs.get('email')
        password = attrs.get('password')

        if email and password:
            user = authenticate(request=self.context.get('request'),
                                username=email, password=password)
            if not user:
                msg = 'Unable to log in with provided credentials'
                raise serializers.ValidationError(msg, code='authorization')

        else:
            msg = 'Must include username and password'
            raise serializers.ValidationError(msg, code='authorization')
        attrs['user'] = user
        return attrs
_______________________________________________________________-
views.py
.
from rest_framework.permissions import IsAuthenticated  #добавляем
from rest_framework.authtoken.models import Token

class LoginView(ObtainAuthToken):       #попутно импортируем этот модуль
    serializer_class = LoginSerializer  #тоже попутно импортим
   

class LogoutView(APIView):
    permission_classes = [IsAuthenticated, ]

    def post(self, request):
        user = request.user
        Token.objects.filter(user=user).delete()
        return Response('Successfully logged out', status=status.HTTP_200_OK)
    
________________________________________________________________
в urls.py (account) добавляем

from django.urls import path
from applications.account.views import RegistrationView, LoginView, LogoutView

urlpatterns = [
    path('register/', RegistrationView.as_view()),
    path('login/', LoginView.as_view()),
    path('logout/', LogoutView.as_view())
]

_______________________________________________________________
runserver --- postman
Сначала email, password, password_confirmation, потом только email, password
http://localhost:8000/account/register/
http://localhost:8000/account/login/

потом logout
Authorization Token 666d89da6ade303f218dab6072ad8756d4f28de5

___________________________________________________________________
создаем приложение product
edit apps.py
_____________________
models.py
.
from django.db import models

class Product(models.Model):
    title = models.CharField(max_length=255)
    count = models.IntegerField(default=0)
    price = models.PositiveIntegerField(default=0)
    image = models.ImageField(upload_to='media')

    def __str__(self):
        return self.title
__________________________________________________________
admin.py
.
from django.contrib import admin

from applications.product.product.models import Product

admin.site.register(Product)
--------------------------------------------------------
pip3 freeze > requirements.txt

создаем product/serializers.py

from rest_framework import serializers
from applications.product.models import Product


class ProductSerializer(serializers.ModelSerializer):
    class Meta:
        model = Product
        fields = '__all__'
________________________________________________________
products/views.py

from rest_framework import generics
from applications.product.models import Product
from applications.product.serializers import ProductSerializer

class ProductListView(generics.ListAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
___________________________________________________
дбавляем product/urls.py

from django.urls import path

from applications.product.views import ProductListView

urlpatterns = [
    path('list/', ProductListView.as_view())
]

_____________________________________________________
в Постман http://localhost:8000/product/list/ ГЕТ вытаскивает наши продукты
______________________________________Теперь смогут посмотреть только зареганные

идем в product/views
.
from rest_framework import generics
from rest_framework.permissions import IsAuthenticated

from applications.product.models import Product
from applications.product.serializers import ProductSerializer


class ProductListView(generics.ListAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    permission_classes = [IsAuthenticated, ]
    
_______________________________________________________
registration/products

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('account/', include('applications.account.urls')),
    path('product/', include('applications.product.urls'))
]

__________________________________________________________-
в .env добавляем media
